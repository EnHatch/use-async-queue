{"version":3,"file":"use-async-queue.module.js","sources":["../use-async-queue.ts"],"sourcesContent":["import { useState, useRef, useCallback, useEffect } from 'react';\nimport nextTick from 'next-tick';\n\ninterface QueueStats {\n  numPending: number;\n  numInFlight: number;\n  numDone: number;\n}\n\ninterface QueueTaskResult {\n  id: any;\n  task(): Promise<any>;\n  result?: Promise<any>;\n  stats?: QueueStats;\n}\n\ninterface Queue {\n  add: (task: QueueTaskResult) => void;\n  stats: QueueStats;\n}\n\ninterface QueueOpts {\n  concurrency?: number;\n  done?: (result: QueueTaskResult) => void;\n  drain?: () => void;\n  inflight?: (task: QueueTaskResult) => void;\n}\n\nfunction useAsyncQueue(opts: QueueOpts): Queue {\n  const { done, drain, inflight } = opts;\n  let { concurrency } = opts;\n  if (concurrency < 1) concurrency = Infinity;\n\n  const [stats, setStats] = useState({\n    numPending: 0,\n    numInFlight: 0,\n    numDone: 0,\n  });\n\n  const drained = useRef(true);\n  const inFlight = useRef([] as QueueTaskResult[]);\n  const pending = useRef([] as QueueTaskResult[]);\n\n  useEffect(() => {\n    if (\n      stats.numDone > 0 &&\n      drain &&\n      inFlight.current.length === 0 &&\n      pending.current.length === 0 &&\n      !drained.current\n    ) {\n      drained.current = true;\n      return nextTick(drain);\n    }\n\n    while (\n      inFlight.current.length < concurrency &&\n      pending.current.length > 0\n    ) {\n      drained.current = false;\n      const task = pending.current.shift()\n      inFlight.current.push(task);\n      setStats(stats => {\n        return {\n          ...stats,\n          numPending: stats.numPending - 1,\n          numInFlight: stats.numInFlight + 1,\n        };\n      });\n      inflight && inflight({ ...task, stats });\n      const result = task.task();\n      result\n        .then(() => {\n          inFlight.current.pop();\n          setStats(stats => {\n            return {\n              ...stats,\n              numInFlight: stats.numInFlight - 1,\n              numDone: stats.numDone + 1,\n            };\n          });\n          done && done({ ...task, result, stats });\n        })\n        .catch(() => {\n          inFlight.current.pop();\n          setStats(stats => {\n            return {\n              ...stats,\n              numInFlight: stats.numInFlight - 1,\n              numDone: stats.numDone + 1,\n            };\n          });\n          done && done({ ...task, result, stats });\n        });\n    }\n  }, [concurrency, done, drain, inflight, stats]);\n\n  const add = useCallback((task: QueueTaskResult) => {\n    pending.current.push(task);\n    setStats(stats => {\n      return {\n        ...stats,\n        numPending: stats.numPending + 1,\n      };\n    });\n  }, []);\n\n  return { add, stats };\n}\n\nexport default useAsyncQueue;\n"],"names":["opts","done","concurrency","Infinity","useState","numPending","numInFlight","numDone","drained","useRef","inFlight","pending","useEffect","stats","drain","current","length","nextTick","task","shift","push","setStats","Object","inflight","result","then","pop","catch","useCallback"],"mappings":"qHA4BA,SAAuBA,GACbC,oDAEJC,EAAc,IAAGA,EAAcC,gBAETC,EAAS,CACjCC,WAAY,EACZC,YAAa,EACbC,QAAS,kBAGLC,EAAUC,GAAO,GACjBC,EAAWD,EAAO,IAClBE,EAAUF,EAAO,WAEvBG,gBAEIC,EAAMN,QAAU,GAChBO,GAC4B,IAA5BJ,EAASK,QAAQC,QACU,IAA3BL,EAAQI,QAAQC,SACfR,EAAQO,eAETP,EAAQO,SAAU,EACXE,EAASH,wBAOhBN,EAAQO,SAAU,MACZG,EAAOP,EAAQI,QAAQI,QAC7BT,EAASK,QAAQK,KAAKF,GACtBG,WAASR,UACAS,iBACFT,GACHR,WAAYQ,EAAMR,WAAa,EAC/BC,YAAaO,EAAMP,YAAc,MAGrCiB,GAAYA,EAASD,iBAAKJ,SAAML,SAC1BW,EAASN,EAAKA,OACpBM,EACGC,gBACCf,EAASK,QAAQW,MACjBL,WAASR,UACAS,iBACFT,GACHP,YAAaO,EAAMP,YAAc,EACjCC,QAASM,EAAMN,QAAU,MAG7BN,GAAQA,EAAKqB,iBAAKJ,UAAMM,QAAQX,OAEjCc,iBACCjB,EAASK,QAAQW,MACjBL,WAASR,UACAS,iBACFT,GACHP,YAAaO,EAAMP,YAAc,EACjCC,QAASM,EAAMN,QAAU,MAG7BN,GAAQA,EAAKqB,iBAAKJ,UAAMM,QAAQX,QApCpCH,EAASK,QAAQC,OAASd,GAC1BS,EAAQI,QAAQC,OAAS,QAsC1B,CAACd,EAAaD,EAAMa,EAAOS,EAAUV,IAYjC,KAVKe,WAAaV,GACvBP,EAAQI,QAAQK,KAAKF,GACrBG,WAASR,UACAS,iBACFT,GACHR,WAAYQ,EAAMR,WAAa,OAGlC,UAEWQ"}