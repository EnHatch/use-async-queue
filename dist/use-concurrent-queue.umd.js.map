{"version":3,"file":"use-concurrent-queue.umd.js","sources":["../use-concurrent-queue.js"],"sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useQueue } from 'react-use';\n\n/*\ntask\n{id: string or number, task: function returning promise}\n*/\nexport default function useConcurrentQueue({ concurrency, done }) {\n  if (concurrency < 1) concurrency = 1;\n\n  // { add, remove, first, last, size }\n  const inFlight = useQueue();\n  const remaining = useQueue();\n\n  const add = useCallback(\n    (task) => {\n      remaining.add(task);\n    },\n    [remaining]\n  );\n\n  useEffect(() => {\n    while (inFlight.size < concurrency && remaining.size > 0) {\n      const task = remaining.remove();\n      inFlight.add(task);\n      const promise = task.task();\n      promise.then(() => {\n        inFlight.remove(task);\n        done({ ...task, promise });\n      });\n    }\n  }, [concurrency, done, inFlight, remaining]);\n\n  return { add };\n}\n"],"names":["concurrency","inFlight","useQueue","remaining","add","useCallback","task","useEffect","remove","promise","then","done","Object","size"],"mappings":"wQAOe,yCACTA,EAAc,IAAGA,EAAc,OAG7BC,EAAWC,aACXC,EAAYD,aAEZE,EAAMC,uBACTC,GACCH,EAAUC,IAAIE,IAEhB,CAACH,WAGHI,gDAEUD,EAAOH,EAAUK,SACvBP,EAASG,IAAIE,OACPG,EAAUH,EAAKA,OACrBG,EAAQC,gBACNT,EAASO,OAAOF,GAChBK,EAAKC,iBAAKN,WAAMG,QANbR,EAASY,KAAOb,GAAeG,EAAUU,KAAO,QAStD,CAACb,EAAaW,EAAMV,EAAUE,IAE1B,KAAEC"}